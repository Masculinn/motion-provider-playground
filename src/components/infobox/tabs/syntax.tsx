import { useMemo } from "react";
import { ReduxRootState } from "@/redux";
import { useSelector } from "react-redux";
import { useCopyToClipboard } from "@uidotdev/usehooks";
import InfoBoxScrollLayout from "@/layouts/infobox-scroll-layout";
import { PrismLight as SyntaxHighlighter } from "react-syntax-highlighter";
import tsx from "react-syntax-highlighter/dist/cjs/languages/prism/tsx";
import tomorrow from "react-syntax-highlighter/dist/cjs/styles/prism/tomorrow";
import { CopyCode } from "@/components/copy-code";

SyntaxHighlighter?.registerLanguage("typescript", tsx);

const Syntax = () => {
  const [copiedText, copyToClipboard] = useCopyToClipboard();
  const currentCodeID = crypto.randomUUID().slice(0, 6);

  const currentMotion = useSelector(
    (state: ReduxRootState) => state.metadata.currentMotion
  ) as ReduxRootState["metadata"]["currentMotion"];

  const { animation, delayLogic } = useSelector(
    (state: ReduxRootState) => state.motion
  );

  const handleCopyCode = () => copyToClipboard(code);

  const code = useMemo(
    () => `/* 
This code is generated by the playground 
engine and matches with the current state 
of the animation. You can copy&paste, 
ready-to-use in seconds!
*/

import MotionChain from "@/motion/motion-chain";
import { MotionAnimationProps } from "@/motion/types";

const items = Array.from({ length: 5 }, (_, i) => <div className="size-12 my-1 rounded-2xl bg-stone-700 text-white grid place-items-center">{i + 1}</div>);
const animations = items.map(() => ({
  mode: ${JSON.stringify(animation.mode)},
  transition: ${JSON.stringify(animation.transition)},
  duration: ${JSON.stringify(animation.duration)},
})) as MotionAnimationProps[]

export function ${currentMotion}_${currentCodeID}() {
    return (
      <MotionChain 
        animations={animations}
        config={{
          duration: 0.15,
          delayLogic: ${JSON.stringify(delayLogic)},
        }}
        elementType={"div"}
      >
        {items}
      </MotionChain>
    )
}

`,
    [
      currentMotion,
      animation.mode,
      animation.transition,
      animation.duration,
      delayLogic,
    ]
  );
  return (
    <InfoBoxScrollLayout className="w-full">
      <SyntaxHighlighter
        language="typescript"
        style={tomorrow}
        customStyle={{
          backgroundColor: "rgba(0, 0, 0, 0)",
          fontSize: "0.75rem",
          width: "100%",
          height: "100%",
        }}
        lineNumberStyle={{ color: "#666" }}
        showLineNumbers
      >
        {code}
      </SyntaxHighlighter>
      <CopyCode
        variant={"outline"}
        onClick={handleCopyCode}
        className="absolute bottom-8 right-8 z-50"
      />
    </InfoBoxScrollLayout>
  );
};

export default Syntax;
